/* soapClient.cpp
   Generated by gSOAP 2.8.22 from outfile.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.22 2015-08-14 09:13:27 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__run(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string data, std::string &run)
{	struct ns1__run soap_tmp_ns1__run;
	struct ns1__runResponse *soap_tmp_ns1__runResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.0.62:80/htdocs/soap.php";
	if (soap_action == NULL)
		soap_action = "urn:soapPack#soap_pack#run";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns1__run.data = data;
	soap_serializeheader(soap);
	soap_serialize_ns1__run(soap, &soap_tmp_ns1__run);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__run(soap, &soap_tmp_ns1__run, "ns1:run", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__run(soap, &soap_tmp_ns1__run, "ns1:run", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&run)
		return soap_closesock(soap);
	soap_default_std__string(soap, &run);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__runResponse = soap_get_ns1__runResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__runResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	run = soap_tmp_ns1__runResponse->run;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
